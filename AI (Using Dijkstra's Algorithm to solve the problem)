# Using Dijkstra's algorithm to solve this constraint satisfaction problem.
import heapq

def calculate_distances(graph, starting_vertex):
    distances = {vertex: float('infinity') for vertex in graph}
    distances[starting_vertex] = 0

    pq = [(0, starting_vertex)]
    while len(pq) > 0:
        current_distance, current_vertex = heapq.heappop(pq)

        # Nodes can get added to the priority queue multiple times. We only
        # process a vertex the first time we remove it from the priority queue.
        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight

            # Only consider this new path if it's better than any path we've
            # already found.
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(pq, (distance, neighbor))

    return distances

# Creating a graph for the problem
example_graph = {
    'Peter': {'Python': 1, 'AI': 1},
    'Juan': {'Web': 1, 'AI': 1},
    'Jim': {'AI': 1, 'Systems': 1},
    'Jane': {'Python': 1, 'Database': 1},
    'Mary': {'Web': 1, 'Systems': 1},
    'Bruce': {'Systems': 1, 'Python': 1},
    'Anita': {'Web': 1, 'AI': 1},
    'Ciara': {'Python': 1},
}
